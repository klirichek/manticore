Version 2.2.1-beta, 13 nov 2013
-------------------------------

Major new features
~~~~~~~~~~~~~~~~~~

-  added `ALTER TABLE <../alter_syntax.rst>`__ that can add attributes to
   disk and RT indexes on the fly
-  added ATTACH support for non-empty RT target indexes
-  added Chinese segmentation with
   `RLP <../index_configuration_options/morphology.rst>`__ (Rosette
   Linguistics platform) support
-  added English, German
   `lemmatization <../index_configuration_options/morphology.rst>`__
   support
-  added `HAVING <../select_syntax.rst>`__ support to SELECT statement,
   filtering on aggregate values is now possible
-  added `N-best GROUP BY <../select_syntax.rst>`__ extension to return
   more than 1 row per group
-  added RT index support for
   `index\_field\_lengths=1 <../index_configuration_options/indexfield_lengths.rst>`__,
   bitfield attributes, and multiforms
-  added
   `CSV <../tsvpipecsvpipe_tabcomma_separated_values_data_sour.rst>`__,
   `TSV <../tsvpipecsvpipe_tabcomma_separated_values_data_sour.rst>`__
   data sources
-  added full
   `JSON <../data_source_configuration_options/sqlattr_json.rst>`__
   attributes support, arbitrary JSON documents (with subobjects etc)
   can now be stored
-  added in-place JSON updates for scalar values
-  added index
   `type=template <../index_configuration_options/type.rst>`__ directive
   (allows CALL KEYWORDS, CALL SNIPPETS)
-  added
   `ondisk\_attrs <../index_configuration_options/ondiskattrs.rst>`__,
   `ondisk\_attrs\_default <../searchd_program_configuration_options/ondiskattrs_default.rst>`__
   directives that keep attributes on disk
-  added table functions mechanism, and
   `REMOVE\_REPEATS() <../select_syntax.rst>`__ table function
-  added support for arbitrary expressions in WHERE for DELETE queries

Ranking related features
~~~~~~~~~~~~~~~~~~~~~~~~

-  added OPTION `local\_df=1 <../select_syntax.rst>`__, an option to
   aggregate IDFs over local indexes (shards)
-  added `UDF <../sphinx_udfs_user_defined_functions.rst>`__
   XXX\_reinit() method to reload UDFs with ``workers=prefork``
-  added comma-separated syntax to `OPTION <../select_syntax.rst>`__
   ``idf``, ``tfidf_unnormalized`` and ``tfidf_normalized`` flags
-  added ``lccs``, ``wlccs``, ``exact_order``, ``min_gaps``, and ``atc``
   `ranking
   factors <../search_results_ranking/field-level_ranking_factors.rst>`__
-  added ``sphinx_get_XXX_factors()``, a faster interface to access
   `PACKEDFACTORS() <../expressions,_functions,_and_operators/miscellaneous_functions.rst>`__
   in UDFs
-  added support for
   `exact\_hit <../search_results_ranking/field-level_ranking_factors.rst>`__,
   `exact\_order <../search_results_ranking/field-level_ranking_factors.rst>`__
   field factors when using more than 32 fields (exact\_hit,
   exact\_order)

Instrumentation features
~~~~~~~~~~~~~~~~~~~~~~~~

-  added `DESCRIBE <../describe_syntax.rst>`__ and
   `–dumpheader <../indextool_command_reference.rst>`__ support for
   tokencount attributes (generated by index\_field\_lengths=1
   directive)
-  added RT index query profile, percentages, totals to `SHOW
   PROFILE <../show_profile_syntax.rst>`__
-  added ``predicted_time``, ``dist_predicted_time``, ``fetched_docs``,
   ``fetched_hits`` counters to `SHOW META <../show_meta_syntax.rst>`__
-  added ``total_tokens`` and ``disk_bytes`` counters to `SHOW INDEX
   STATUS <../show_index_status_syntax.rst>`__

General features
~~~~~~~~~~~~~~~~

-  added
   `ALL() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-all>`__,
   `ANY() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-any>`__
   and
   `INDEXOF() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-indexof>`__
   functions for JSON subarrays
-  added
   `MIN\_TOP\_WEIGHT() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-min-top-weight>`__,
   `MIN\_TOP\_SORTVAL() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-min-top-sortval>`__
   functions
-  added
   `TOP() <../search_results_ranking/ranking_factor_aggregation_functions.rst>`__
   aggregate function to expression ranker
-  added a check for duplicated tail hit positions in `indextool
   –check <../indextool_command_reference.rst>`__
-  added
   `compact\_in <../searchd_query_log_formats/sphinxql_log_format.rst>`__
   option to
   `query\_log\_format=sphinxql <../searchd_program_configuration_options/querylog_format.rst>`__
-  added distance units and calculation method options to
   `GEODIST() <../5_searching/expressions,_functions,_and_operators/miscellaneous_functions.rst#expr-func-geodist>`__
   function, optimized it a lot
-  added embedded stopwords/exceptions/wordforms to ``--dumpheader``
-  added `indexer –nohup <../indexer_command_reference.rst>`__ and
   `indextool –rotate <../indextool_command_reference.rst>`__ switches to
   check index files before rotating them
-  added scientific notation support for JSON attributes (as per `RFC
   4627 <http://www.ietf.org/rfc/rfc4627.txt>`__)
-  added several SphinxQL statements to fix MySQL Workbench connection
   issues (LIKE for session variables, etc.)
-  added
   `shutdown\_timeout <../searchd_program_configuration_options/shutdowntimeout.rst>`__
   directive to ``searchd`` config section
-  added signed values support for
   `INTEGER() <../5_searching/expressions,_functions,_and_operators/type_conversion_functions.rst#expr-func-integer>`__
   and
   `UINT() <../5_searching/expressions,_functions,_and_operators/numeric_functions.rst#expr-func-uint>`__
   function
-  added snippet generation options to
   `SNIPPET() <../select_syntax.rst>`__ function
-  added string filter support in distributed queries, SphinxAPI,
   SphinxQL query log
-  added support for mixed distributed and local index queries (SELECT
   \* FROM dist1,dist2,local3), and ``index_weights`` option for that
   case

Optimizations, behavior changes, and removals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  optimized JSON attributes access (1.12x to 2.0x+ total query speedup
   depending on the JSON data)
-  optimized SELECT (1.02x to 3.5x speedup, depending on index schema
   size)
-  optimized `UPDATE <../update_syntax.rst>`__ (up to 3x faster on big
   updates)
-  optimized away internal threads table mutex contention with
   ``workers=threads`` and 1000s of threads
-  changed [emptyword -foo] query behavior in cases when emptyword is a
   stopword or an overshort word, made such queries computable rather
   than erroneous
-  changed post-morphology
   `wordforms <../index_configuration_options/wordforms.rst>`__ behavior,
   now it works as
   ``&#039;if ( stem(token)==stem(abc) ) emit(def)&#039;``
-  changed the `config
   defaults <../sphinx_deprecations_and_changes_in_default_configu.rst>`__
   to ``id64``, ``dict=keywords``, ``charset_type=utf-8``,
   ``enable_star=1``, ``workers=threads``, ``mem_limit=128M``,
   ``rt_mem_limit=128M``
-  changed the default SphinxAPI matching mode to
   `SPH\_MATCH\_EXTENDED2 <../matching_modes.rst>`__
-  disallowed dashes in index names in API requests (just like in
   SphinxQL)
-  removed legacy ``xmlpipe`` data source v1, ``compat_sphinxql_magics``
   directive, ``SetWeights()`` SphinxAPI call, and SPH\_SORT\_CUSTOM
   SphinxAPI mode

Bug fixes
~~~~~~~~~

-  fixed #1734, unquoted literal in json subscript could cause a crash,
   returns ‘unknown column’ now.
-  fixed #1683, under certain conditions
   `stopwords <../index_configuration_options/stopwords.rst>`__ were not
   taken into account in RT indexes
-  fixed #1648, #1644, when using AOT lemmas with snippet generation,
   not all the forms got highlighted
-  fixed #1549, `OPTION <../select_syntax.rst>`__
   ``idf=tfidf_normalized`` was ignored for distributed queries
-  fixed that `ORDER BY RAND() <../select_syntax.rst>`__ was not affected
   by ``index_weights``
-  fixed that float updates with integer values in SphinxQL mistakenly
   set the float to 0
-  fixed that ``predicted_time`` was not accumulated with
   `dist\_threads <../searchd_program_configuration_options/distthreads.rst>`__
-  fixed `GROUP\_CONCAT <../select_syntax.rst>`__ result length limit
   (was implicitly limited by 1024 bytes)
-  fixed agent query distribution in HA mirroring
-  fixed duplicates check for `quorum
   operator <../extended_query_syntax.rst>`__, it works ok now for
   expanded keywords
-  fixed off-by-1 query positions of words in indexes with wordforms and
   `blended characters <../extended_query_syntax.rst>`__
-  fixed wrong ``lcs`` and
   `min\_best\_span\_pos <../search_results_ranking/field-level_ranking_factors.rst>`__
   ranking factor values when any expansion
   (`expand\_keywords <../index_configuration_options/expandkeywords.rst>`__
   or lemmatize) occurred
-  fixed a crash while creating indexes with
   `sql\_joined\_field <../data_source_configuration_options/sqljoined_field.rst>`__
